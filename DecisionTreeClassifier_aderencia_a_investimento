{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d63762c7-9924-4894-9594-eeabdf0a91c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: imblearn in c:\\users\\bruno\\anaconda3\\lib\\site-packages (0.0)\n",
      "Requirement already satisfied: imbalanced-learn in c:\\users\\bruno\\anaconda3\\lib\\site-packages (from imblearn) (0.11.0)\n",
      "Requirement already satisfied: numpy>=1.17.3 in c:\\users\\bruno\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (1.26.4)\n",
      "Requirement already satisfied: scipy>=1.5.0 in c:\\users\\bruno\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (1.11.4)\n",
      "Requirement already satisfied: scikit-learn>=1.0.2 in c:\\users\\bruno\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (1.2.2)\n",
      "Requirement already satisfied: joblib>=1.1.1 in c:\\users\\bruno\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (1.2.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\users\\bruno\\anaconda3\\lib\\site-packages (from imbalanced-learn->imblearn) (2.2.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install imblearn\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5fe943eb-9986-44f0-9627-03e8ac79c718",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"C:/Users/Bruno/Jupyter Notebooks/Curso_MachineLearning_Classificacao_2/Dados/emp_automovel.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "98d5724d-603f-449f-b0c2-73707cb07142",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 54025 entries, 0 to 54024\n",
      "Data columns (total 11 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   receita_cliente      54025 non-null  float64\n",
      " 1   anuidade_emprestimo  54025 non-null  float64\n",
      " 2   anos_casa_propria    54025 non-null  float64\n",
      " 3   telefone_trab        54025 non-null  int64  \n",
      " 4   avaliacao_cidade     54025 non-null  float64\n",
      " 5   score_1              54025 non-null  float64\n",
      " 6   score_2              54025 non-null  float64\n",
      " 7   score_3              54025 non-null  float64\n",
      " 8   score_social         54025 non-null  float64\n",
      " 9   troca_telefone       54025 non-null  float64\n",
      " 10  inadimplente         54025 non-null  int64  \n",
      "dtypes: float64(9), int64(2)\n",
      "memory usage: 4.5 MB\n"
     ]
    }
   ],
   "source": [
    "#Descobrindo Informações sobre os dados\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9c06a858-39ee-4c85-abf7-3504b11006c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>receita_cliente</th>\n",
       "      <th>anuidade_emprestimo</th>\n",
       "      <th>anos_casa_propria</th>\n",
       "      <th>telefone_trab</th>\n",
       "      <th>avaliacao_cidade</th>\n",
       "      <th>score_1</th>\n",
       "      <th>score_2</th>\n",
       "      <th>score_3</th>\n",
       "      <th>score_social</th>\n",
       "      <th>troca_telefone</th>\n",
       "      <th>inadimplente</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12600.0</td>\n",
       "      <td>3569.400000</td>\n",
       "      <td>12.157324</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.057153</td>\n",
       "      <td>0.527227</td>\n",
       "      <td>0.513171</td>\n",
       "      <td>0.117428</td>\n",
       "      <td>2545.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9000.0</td>\n",
       "      <td>2722.188351</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.657661</td>\n",
       "      <td>0.285898</td>\n",
       "      <td>0.614414</td>\n",
       "      <td>0.222700</td>\n",
       "      <td>495.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15750.0</td>\n",
       "      <td>4477.500000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.501213</td>\n",
       "      <td>0.695423</td>\n",
       "      <td>0.513171</td>\n",
       "      <td>0.117428</td>\n",
       "      <td>1212.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9000.0</td>\n",
       "      <td>1309.050000</td>\n",
       "      <td>12.157324</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.501213</td>\n",
       "      <td>0.155973</td>\n",
       "      <td>0.513171</td>\n",
       "      <td>0.117428</td>\n",
       "      <td>515.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7650.0</td>\n",
       "      <td>1125.000000</td>\n",
       "      <td>12.157324</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.294328</td>\n",
       "      <td>0.152076</td>\n",
       "      <td>0.513171</td>\n",
       "      <td>0.117428</td>\n",
       "      <td>162.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   receita_cliente  anuidade_emprestimo  anos_casa_propria  telefone_trab  \\\n",
       "0          12600.0          3569.400000          12.157324              1   \n",
       "1           9000.0          2722.188351           7.000000              0   \n",
       "2          15750.0          4477.500000          12.000000              0   \n",
       "3           9000.0          1309.050000          12.157324              0   \n",
       "4           7650.0          1125.000000          12.157324              0   \n",
       "\n",
       "   avaliacao_cidade   score_1   score_2   score_3  score_social  \\\n",
       "0               2.0  0.057153  0.527227  0.513171      0.117428   \n",
       "1               2.0  0.657661  0.285898  0.614414      0.222700   \n",
       "2               2.0  0.501213  0.695423  0.513171      0.117428   \n",
       "3               3.0  0.501213  0.155973  0.513171      0.117428   \n",
       "4               2.0  0.294328  0.152076  0.513171      0.117428   \n",
       "\n",
       "   troca_telefone  inadimplente  \n",
       "0          2545.0             0  \n",
       "1           495.0             0  \n",
       "2          1212.0             0  \n",
       "3           515.0             0  \n",
       "4           162.0             0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Pegando as 5 primeiras linhas para ter uma ideia melhor dos dados\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "84346df2-b0cb-4434-ad50-f632fd1bba34",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Separando a variavel alvo das restantes(inadimplente)\n",
    "x = df.drop(\"inadimplente\", axis= 1)\n",
    "y = df[\"inadimplente\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bcf2472d-d3ef-40a8-83e6-295fa6f5e8b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importando o DecisionTreeClassifier e train_test_split\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fcf9febc-4179-4803-a398-7eb073034147",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=3)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(max_depth=3)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Aplicando o train_test_split, dividindo 75% do df para treino e  15% para teste e instanciando o DecisionTreeClassifier com max_depth de valor 3 \n",
    "#Dividirei mais uma vez usando o train_test_split para criar uma divisão de validação\n",
    "x,X_test,y,Y_test = train_test_split(x,y,test_size = 0.15, random_state = 352,stratify = y)\n",
    "X_train,X_validation,Y_train,Y_validation = train_test_split(x,y,random_state = 352,stratify = y)\n",
    "\n",
    "model = DecisionTreeClassifier(max_depth = 3)\n",
    "model.fit(X_train,Y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8424b703-e90f-4a39-aaef-d2b1f3defaad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9123769706471562"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Testando a Acurácia do modelo\n",
    "model.score(X_validation,Y_validation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8407ef87-ec1c-4963-be1f-79f4541b1482",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x18230106fd0>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Verificando a matrix de confusão\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import ConfusionMatrixDisplay\n",
    "y_predict = model.predict(X_validation)\n",
    "confusion_mtx = confusion_matrix(Y_validation,y_predict)\n",
    "confusion_matrix_display = ConfusionMatrixDisplay(confusion_matrix = confusion_mtx, display_labels= [\"Adimplente\",\"Inadimplente\"])\n",
    "confusion_matrix_display.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3a1ca0bf-cd74-48aa-a1fa-4bdbd1201d3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Podemos notar que o nosso modelo está muito bom em prever verdareiros negativos, porem errando muito nos verdadeiros positivos\n",
    "#Vamos importar o accuracy_score para olhar outras metricas\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4006f7bb-1127-4c2e-8cd0-b9504b6470cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy = 0.9123769706471562\n",
      "Precision = 0.3888888888888889\n",
      "F1_score = 0.01372549019607843\n",
      "Recall = 0.006986027944111776\n"
     ]
    }
   ],
   "source": [
    "print(f\"Accuracy = {accuracy_score(Y_validation,y_predict)}\")\n",
    "print(f\"Precision = {precision_score(Y_validation,y_predict)}\")\n",
    "print(f\"F1_score = {f1_score(Y_validation,y_predict)}\")\n",
    "print(f\"Recall = {recall_score(Y_validation,y_predict)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "54194e48-efa3-43f1-a259-d76e174ce2f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Como a prioridade é diminuir a quantidade de falsos negativos, pois é o que traz prejuizo para a empresa vamos usar ele como metrica \n",
    "# para classificar quão bom o modelo está, ou seja, temos que melhorar a metrica Recall\n",
    "#Vamos analisar melhor essas metricas usando a curva ROC que é usada para avaliar se nosso modelo consegue fazer uma distinção eficaz entre as classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8d4e21bd-fc9b-40b0-94ff-d2e445ebc7bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x1822b381850>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import RocCurveDisplay, roc_auc_score\n",
    "RocCurveDisplay.from_predictions(Y_validation,y_predict, name = \"Decision Tree\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e56ee455-d9af-4013-a82e-f6ba5949f2eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Roc score = 0.5029681547297619\n"
     ]
    }
   ],
   "source": [
    "#Podemos ver que o modelo está muito ruim em distiguir a classe(pois o AUC está 0,50 ),e quanto maior o AUC melhor.\n",
    "print(f\"Roc score = {roc_auc_score(Y_validation,y_predict)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a3b24cf2-6ba2-4483-9690-c9db6cd91b7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Precision(AP) = 0.08938171330306319\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Como os dados estão muito desbalanceados podemos usar a curva de precisão para entender melhor os dados em nosso caso\n",
    "from sklearn.metrics import PrecisionRecallDisplay, average_precision_score\n",
    "PrecisionRecallDisplay.from_predictions(Y_validation,y_predict, name = \"Decision Tree\")\n",
    "print(f\"Average Precision(AP) = {average_precision_score(Y_validation,y_predict)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3580b6d5-4470-4e6b-89e0-78373a473a94",
   "metadata": {},
   "outputs": [],
   "source": [
    "#No caso do grafico acima o ideal é o ponto 1,1 ou seja, uma diagonal, porem podemos ver que esse grafico está longe de atingir o ponto 1,1\n",
    "#Mostrando que o modelo não está conseguindo manter uma boa proporção entre detectar eficientemente os clientes inadimplentes, \n",
    "#tanto para não perder clientes quanto para evitar vendas para clientes que não pagarão."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d4b36464-4c8b-4b85-b95c-3fc76e17d8a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      1.00      0.95     10479\n",
      "           1       0.39      0.01      0.01      1002\n",
      "\n",
      "    accuracy                           0.91     11481\n",
      "   macro avg       0.65      0.50      0.48     11481\n",
      "weighted avg       0.87      0.91      0.87     11481\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Em vez de ter olhado cada metrica uma por uma podemos utilizar o classification report do sklearn.metrics\n",
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(Y_validation,y_predict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1f0cc446-6b76-443f-9808-e251ca920c16",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Essa tabela mostra a precisao de acertos positivos(precision(1)) de acertos negativos(pricision(0)), e as outrs metricas que fizemos manualmente \n",
    "#A coluna support mostra a quantidade de clientes adimplentes(0) e a quantidade de clientes inadimplentes(1), é possivel notar que elas possuem uma\n",
    "# diferença muito grande.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8942cfbd-9997-4bb8-b938-236d0e37ce73",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ultilizarei cross_validation com KFold para dividir melhor os dados de treino e validação\n",
    "#É importante citar que quanto maior o numero de divisões, muito maior é a exigencia computacional, então utilizar um numero de divisões muito maiores\n",
    "#do que 10 se torna desnecessario e muito custoso computacionalmente.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b8230151-877e-426c-9f9b-4c5a6bcbf24a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'fit_time': array([0.15598822, 0.15706229, 0.16735244, 0.17575216, 0.1762023 ,\n",
       "        0.17826629, 0.1660037 , 0.17652106, 0.15901256, 0.16107869]),\n",
       " 'score_time': array([0.00252008, 0.00200057, 0.0037539 , 0.00200033, 0.00099993,\n",
       "        0.00200009, 0.00200009, 0.00199962, 0.00199938, 0.00241542]),\n",
       " 'test_score': array([0.90115393, 0.9113676 , 0.90875436, 0.89917247, 0.91180314,\n",
       "        0.91158537, 0.90243902, 0.90788328, 0.90810105, 0.90831882])}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_validate, KFold\n",
    "model = DecisionTreeClassifier(max_depth = 10)\n",
    "kf = KFold(n_splits = 10, shuffle = True, random_state = 352)\n",
    "cross_validation_results = cross_validate(model, x, y, cv = kf)\n",
    "cross_validation_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "96f33ce6-b72e-4c61-b29c-4e640b4104e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Utilizando o desvio padrao podemos chegar em um intervalo de confiança.\n",
    "def intervalo_de_confianca(results):\n",
    "    mean = results[\"test_score\"].mean()\n",
    "    standard_deviation = results[\"test_score\"].std()\n",
    "    print(f'Intervalo de confiança: [{mean - 2*standard_deviation}, {min(mean + 2*standard_deviation, 1)}]')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "eff96833-2e06-482b-a797-952b5f69c7be",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Chegamos em um intervalo de confiança decente, porem o importante para empresa é o recall, logo devemos usar o scoring = 'recall'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "97fb8709-0a93-486e-96cd-e281462c02d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intervalo de confiança: [0.005360341310576153, 0.049636115708963605]\n"
     ]
    }
   ],
   "source": [
    "model = DecisionTreeClassifier(max_depth = 10)\n",
    "kf = KFold(n_splits = 10, shuffle = True, random_state = 352)\n",
    "cross_validation_results = cross_validate(model, x, y, cv = kf, scoring = 'recall')\n",
    "intervalo_de_confianca(cross_validation_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a0613028-fe31-4f17-a010-90b7ec354da7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intervalo de confiança: [0.012337732233717695, 0.04953134507301547]\n"
     ]
    }
   ],
   "source": [
    "#É possivel reparar que mesmo usando cross_validation o valor do recall não aumentou, \n",
    "#e isso se deve a quantidade de dados sobre inadimplentes e adimplentes.\n",
    "#Para arrumar isso vou usar o Stratified Kfold, que usa uma proporção de dados de clientes inadimplentes e adimplentes\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "model = DecisionTreeClassifier(max_depth = 10)\n",
    "skf = StratifiedKFold(n_splits = 10, shuffle = True, random_state = 352)\n",
    "cross_validation_results = cross_validate(model, x, y, cv = skf, scoring = 'recall')\n",
    "intervalo_de_confianca(cross_validation_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "26b84c7f-7bad-4306-b07c-2d7431e28d36",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Agora os dados variam menos, porem o recall ainda está com um valor muito baixo devido a dispairidade de dados de clientes adimplentes e inadimplentes\n",
    "#Para resolver isso podemos utilizar o Oversampling e o Undersampling\n",
    "#Começando pelo Oversampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "9e55ed81-aa5a-4bd2-9ca2-c633f521b1d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#O Oversampling vai usar padroes muito parecidos com os de clientes inadimplentes para aumentar a quantidade de dados e tornar-los mais similares \n",
    "#A quantidade de clientes adimplentes, para isso devemos usar o SMOTE\n",
    "from imblearn.over_sampling import SMOTE \n",
    "oversample = SMOTE()\n",
    "balanced_x, y_balanced = oversample.fit_resample(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8f8c7ec6-9aaa-4f83-afe5-882f3ebc0ba9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "inadimplente\n",
       "1    0.5\n",
       "0    0.5\n",
       "Name: proportion, dtype: float64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_balanced.value_counts(normalize = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0cbde1d4-70bd-4e22-b1e3-93ce8bfc9b8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intervalo de confiança: [0.7200806929277564, 0.7669875499081279]\n"
     ]
    }
   ],
   "source": [
    "model = DecisionTreeClassifier(max_depth = 10)\n",
    "skf = StratifiedKFold(n_splits = 10, shuffle = True, random_state = 352)\n",
    "cross_validation_results = cross_validate(model, balanced_x, y_balanced, cv = skf, scoring = 'recall')\n",
    "intervalo_de_confianca(cross_validation_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c327abed-ee9d-40aa-ade2-9d3fc26879fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Apesar dos valores de Recall terem aumentado muito, os valores reais não são balanceados, logo é necessario avalia-lo de forma diferente\n",
    "#Para isso vou utilizar uma pipeline de dados da biblioteca imblearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "25f3341e-84d1-4551-b17f-f6b0c1e4d0c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.pipeline import Pipeline as imbpipe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "fd4417e6-b3ef-4600-8342-4282d90fab85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intervalo de confiança: [0.18036551243316923, 0.31901852746708015]\n"
     ]
    }
   ],
   "source": [
    "model = DecisionTreeClassifier(max_depth = 10)\n",
    "pipeline = imbpipe([(\"oversample\", SMOTE()), (\"tree\", model)])\n",
    "cross_validation_results = cross_validate(pipeline, x, y, cv = skf, scoring = 'recall')\n",
    "intervalo_de_confianca(cross_validation_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "2ad62482-5eb3-4744-bab2-1ed96aab86e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Podemos reparar que sem dados balanceados o modelo performa pior do que com dados balanceados, porem, a melhoria ja foi significativa\n",
    "#Vou aplicar o undersampling e ver se há uma melhoria"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6aa4d78b-8bc1-4223-824f-64aeb2f0e1d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intervalo de confiança: [0.5660682694329509, 0.7410090373002163]\n"
     ]
    }
   ],
   "source": [
    "#Usando o near-miss da biblioteca imblearn\n",
    "from imblearn.under_sampling import NearMiss \n",
    "model = DecisionTreeClassifier(max_depth = 10)\n",
    "pipeline = imbpipe([(\"undersampling\", NearMiss(version = 3)), (\"tree\", model)])\n",
    "cross_validation_results = cross_validate(pipeline, x, y, cv = skf, scoring = 'recall')\n",
    "intervalo_de_confianca(cross_validation_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1e5e1bd9-f7c8-4d7b-aa22-ae9224f7b38f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#O intervalo de confiança aumentou ainda mais em comparação com os dados usando oversampling, logo agora falta apenas validar nos dados de teste"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d5b6c7b8-dfe6-48fc-875b-c8f7be7513f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.94      0.52      0.67      7397\n",
      "           1       0.11      0.64      0.19       707\n",
      "\n",
      "    accuracy                           0.53      8104\n",
      "   macro avg       0.53      0.58      0.43      8104\n",
      "weighted avg       0.87      0.53      0.63      8104\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "undersample = NearMiss(version = 3)\n",
    "x_balanced, y_balanced = undersample.fit_resample(x,y)\n",
    "\n",
    "model = DecisionTreeClassifier(max_depth = 10)\n",
    "model.fit(x_balanced, y_balanced)\n",
    "y_predict = model.predict(X_test)\n",
    "print(classification_report(Y_test,y_predict))\n",
    "ConfusionMatrixDisplay.from_predictions(Y_test,y_predict);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b5623a14-5c12-4a8d-926d-504eb1a871ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Projeto Finalizado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05b8f519-fe59-402a-a460-e677d6519b4a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
